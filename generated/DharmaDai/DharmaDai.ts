// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Mint extends EthereumEvent {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get mintDTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Redeem extends EthereumEvent {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get redeemAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get redeemDTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Accrue extends EthereumEvent {
  get params(): Accrue__Params {
    return new Accrue__Params(this);
  }
}

export class Accrue__Params {
  _event: Accrue;

  constructor(event: Accrue) {
    this._event = event;
  }

  get dTokenExchangeRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get cTokenExchangeRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CollectSurplus extends EthereumEvent {
  get params(): CollectSurplus__Params {
    return new CollectSurplus__Params(this);
  }
}

export class CollectSurplus__Params {
  _event: CollectSurplus;

  constructor(event: CollectSurplus) {
    this._event = event;
  }

  get surplusAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get surplusCTokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DharmaDai__getMetaTransactionMessageHashResult {
  value0: Bytes;
  value1: boolean;

  constructor(value0: Bytes, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromFixedBytes(this.value0));
    map.set("value1", EthereumValue.fromBoolean(this.value1));
    return map;
  }
}

export class DharmaDai extends SmartContract {
  static bind(address: Address): DharmaDai {
    return new DharmaDai("DharmaDai", address);
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): CallResult<boolean> {
    let result = super.tryCall("approve", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getVersion(): BigInt {
    let result = super.call("getVersion", []);

    return result[0].toBigInt();
  }

  try_getVersion(): CallResult<BigInt> {
    let result = super.tryCall("getVersion", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  redeemUnderlyingToCToken(underlyingToReceive: BigInt): BigInt {
    let result = super.call("redeemUnderlyingToCToken", [
      EthereumValue.fromUnsignedBigInt(underlyingToReceive)
    ]);

    return result[0].toBigInt();
  }

  try_redeemUnderlyingToCToken(
    underlyingToReceive: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("redeemUnderlyingToCToken", [
      EthereumValue.fromUnsignedBigInt(underlyingToReceive)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): CallResult<BigInt> {
    let result = super.tryCall("totalSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  pullSurplus(): BigInt {
    let result = super.call("pullSurplus", []);

    return result[0].toBigInt();
  }

  try_pullSurplus(): CallResult<BigInt> {
    let result = super.tryCall("pullSurplus", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getSurplus(): BigInt {
    let result = super.call("getSurplus", []);

    return result[0].toBigInt();
  }

  try_getSurplus(): CallResult<BigInt> {
    let result = super.tryCall("getSurplus", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call("transferFrom", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("transferFrom", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  redeemToCToken(dTokensToBurn: BigInt): BigInt {
    let result = super.call("redeemToCToken", [
      EthereumValue.fromUnsignedBigInt(dTokensToBurn)
    ]);

    return result[0].toBigInt();
  }

  try_redeemToCToken(dTokensToBurn: BigInt): CallResult<BigInt> {
    let result = super.tryCall("redeemToCToken", [
      EthereumValue.fromUnsignedBigInt(dTokensToBurn)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  modifyAllowanceViaMetaTransaction(
    owner: Address,
    spender: Address,
    value: BigInt,
    increase: boolean,
    expiration: BigInt,
    salt: Bytes,
    signatures: Bytes
  ): boolean {
    let result = super.call("modifyAllowanceViaMetaTransaction", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(value),
      EthereumValue.fromBoolean(increase),
      EthereumValue.fromUnsignedBigInt(expiration),
      EthereumValue.fromFixedBytes(salt),
      EthereumValue.fromBytes(signatures)
    ]);

    return result[0].toBoolean();
  }

  try_modifyAllowanceViaMetaTransaction(
    owner: Address,
    spender: Address,
    value: BigInt,
    increase: boolean,
    expiration: BigInt,
    salt: Bytes,
    signatures: Bytes
  ): CallResult<boolean> {
    let result = super.tryCall("modifyAllowanceViaMetaTransaction", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(value),
      EthereumValue.fromBoolean(increase),
      EthereumValue.fromUnsignedBigInt(expiration),
      EthereumValue.fromFixedBytes(salt),
      EthereumValue.fromBytes(signatures)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", []);

    return result[0].toI32();
  }

  try_decimals(): CallResult<i32> {
    let result = super.tryCall("decimals", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  transferUnderlying(
    recipient: Address,
    underlyingEquivalentAmount: BigInt
  ): boolean {
    let result = super.call("transferUnderlying", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(underlyingEquivalentAmount)
    ]);

    return result[0].toBoolean();
  }

  try_transferUnderlying(
    recipient: Address,
    underlyingEquivalentAmount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("transferUnderlying", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(underlyingEquivalentAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call("increaseAllowance", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(addedValue)
    ]);

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("increaseAllowance", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(addedValue)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  balanceOfUnderlying(account: Address): BigInt {
    let result = super.call("balanceOfUnderlying", [
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOfUnderlying(account: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOfUnderlying", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getSpreadPerBlock(): BigInt {
    let result = super.call("getSpreadPerBlock", []);

    return result[0].toBigInt();
  }

  try_getSpreadPerBlock(): CallResult<BigInt> {
    let result = super.tryCall("getSpreadPerBlock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getSurplusUnderlying(): BigInt {
    let result = super.call("getSurplusUnderlying", []);

    return result[0].toBigInt();
  }

  try_getSurplusUnderlying(): CallResult<BigInt> {
    let result = super.tryCall("getSurplusUnderlying", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  accrualBlockNumber(): BigInt {
    let result = super.call("accrualBlockNumber", []);

    return result[0].toBigInt();
  }

  try_accrualBlockNumber(): CallResult<BigInt> {
    let result = super.tryCall("accrualBlockNumber", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getMetaTransactionMessageHash(
    functionSelector: Bytes,
    arguments: Bytes,
    expiration: BigInt,
    salt: Bytes
  ): DharmaDai__getMetaTransactionMessageHashResult {
    let result = super.call("getMetaTransactionMessageHash", [
      EthereumValue.fromFixedBytes(functionSelector),
      EthereumValue.fromBytes(arguments),
      EthereumValue.fromUnsignedBigInt(expiration),
      EthereumValue.fromFixedBytes(salt)
    ]);

    return new DharmaDai__getMetaTransactionMessageHashResult(
      result[0].toBytes(),
      result[1].toBoolean()
    );
  }

  try_getMetaTransactionMessageHash(
    functionSelector: Bytes,
    arguments: Bytes,
    expiration: BigInt,
    salt: Bytes
  ): CallResult<DharmaDai__getMetaTransactionMessageHashResult> {
    let result = super.tryCall("getMetaTransactionMessageHash", [
      EthereumValue.fromFixedBytes(functionSelector),
      EthereumValue.fromBytes(arguments),
      EthereumValue.fromUnsignedBigInt(expiration),
      EthereumValue.fromFixedBytes(salt)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new DharmaDai__getMetaTransactionMessageHashResult(
        value[0].toBytes(),
        value[1].toBoolean()
      )
    );
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(account)]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  transferUnderlyingFrom(
    sender: Address,
    recipient: Address,
    underlyingEquivalentAmount: BigInt
  ): boolean {
    let result = super.call("transferUnderlyingFrom", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(underlyingEquivalentAmount)
    ]);

    return result[0].toBoolean();
  }

  try_transferUnderlyingFrom(
    sender: Address,
    recipient: Address,
    underlyingEquivalentAmount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("transferUnderlyingFrom", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(underlyingEquivalentAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  redeemUnderlying(underlyingToReceive: BigInt): BigInt {
    let result = super.call("redeemUnderlying", [
      EthereumValue.fromUnsignedBigInt(underlyingToReceive)
    ]);

    return result[0].toBigInt();
  }

  try_redeemUnderlying(underlyingToReceive: BigInt): CallResult<BigInt> {
    let result = super.tryCall("redeemUnderlying", [
      EthereumValue.fromUnsignedBigInt(underlyingToReceive)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  getUnderlying(): Address {
    let result = super.call("getUnderlying", []);

    return result[0].toAddress();
  }

  try_getUnderlying(): CallResult<Address> {
    let result = super.tryCall("getUnderlying", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  mint(underlyingToSupply: BigInt): BigInt {
    let result = super.call("mint", [
      EthereumValue.fromUnsignedBigInt(underlyingToSupply)
    ]);

    return result[0].toBigInt();
  }

  try_mint(underlyingToSupply: BigInt): CallResult<BigInt> {
    let result = super.tryCall("mint", [
      EthereumValue.fromUnsignedBigInt(underlyingToSupply)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call("decreaseAllowance", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(subtractedValue)
    ]);

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("decreaseAllowance", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(subtractedValue)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(recipient: Address, amount: BigInt): CallResult<boolean> {
    let result = super.tryCall("transfer", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  supplyRatePerBlock(): BigInt {
    let result = super.call("supplyRatePerBlock", []);

    return result[0].toBigInt();
  }

  try_supplyRatePerBlock(): CallResult<BigInt> {
    let result = super.tryCall("supplyRatePerBlock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  exchangeRateCurrent(): BigInt {
    let result = super.call("exchangeRateCurrent", []);

    return result[0].toBigInt();
  }

  try_exchangeRateCurrent(): CallResult<BigInt> {
    let result = super.tryCall("exchangeRateCurrent", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  mintViaCToken(cTokensToSupply: BigInt): BigInt {
    let result = super.call("mintViaCToken", [
      EthereumValue.fromUnsignedBigInt(cTokensToSupply)
    ]);

    return result[0].toBigInt();
  }

  try_mintViaCToken(cTokensToSupply: BigInt): CallResult<BigInt> {
    let result = super.tryCall("mintViaCToken", [
      EthereumValue.fromUnsignedBigInt(cTokensToSupply)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  redeem(dTokensToBurn: BigInt): BigInt {
    let result = super.call("redeem", [
      EthereumValue.fromUnsignedBigInt(dTokensToBurn)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(dTokensToBurn: BigInt): CallResult<BigInt> {
    let result = super.tryCall("redeem", [
      EthereumValue.fromUnsignedBigInt(dTokensToBurn)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call("allowance", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromAddress(spender)
    ]);

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): CallResult<BigInt> {
    let result = super.tryCall("allowance", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromAddress(spender)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getCToken(): Address {
    let result = super.call("getCToken", []);

    return result[0].toAddress();
  }

  try_getCToken(): CallResult<Address> {
    let result = super.tryCall("getCToken", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  totalSupplyUnderlying(): BigInt {
    let result = super.call("totalSupplyUnderlying", []);

    return result[0].toBigInt();
  }

  try_totalSupplyUnderlying(): CallResult<BigInt> {
    let result = super.tryCall("totalSupplyUnderlying", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends EthereumCall {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RedeemUnderlyingToCTokenCall extends EthereumCall {
  get inputs(): RedeemUnderlyingToCTokenCall__Inputs {
    return new RedeemUnderlyingToCTokenCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingToCTokenCall__Outputs {
    return new RedeemUnderlyingToCTokenCall__Outputs(this);
  }
}

export class RedeemUnderlyingToCTokenCall__Inputs {
  _call: RedeemUnderlyingToCTokenCall;

  constructor(call: RedeemUnderlyingToCTokenCall) {
    this._call = call;
  }

  get underlyingToReceive(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingToCTokenCall__Outputs {
  _call: RedeemUnderlyingToCTokenCall;

  constructor(call: RedeemUnderlyingToCTokenCall) {
    this._call = call;
  }

  get dTokensBurned(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PullSurplusCall extends EthereumCall {
  get inputs(): PullSurplusCall__Inputs {
    return new PullSurplusCall__Inputs(this);
  }

  get outputs(): PullSurplusCall__Outputs {
    return new PullSurplusCall__Outputs(this);
  }
}

export class PullSurplusCall__Inputs {
  _call: PullSurplusCall;

  constructor(call: PullSurplusCall) {
    this._call = call;
  }
}

export class PullSurplusCall__Outputs {
  _call: PullSurplusCall;

  constructor(call: PullSurplusCall) {
    this._call = call;
  }

  get cTokenSurplus(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferFromCall extends EthereumCall {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RedeemToCTokenCall extends EthereumCall {
  get inputs(): RedeemToCTokenCall__Inputs {
    return new RedeemToCTokenCall__Inputs(this);
  }

  get outputs(): RedeemToCTokenCall__Outputs {
    return new RedeemToCTokenCall__Outputs(this);
  }
}

export class RedeemToCTokenCall__Inputs {
  _call: RedeemToCTokenCall;

  constructor(call: RedeemToCTokenCall) {
    this._call = call;
  }

  get dTokensToBurn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemToCTokenCall__Outputs {
  _call: RedeemToCTokenCall;

  constructor(call: RedeemToCTokenCall) {
    this._call = call;
  }

  get cTokensReceived(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ModifyAllowanceViaMetaTransactionCall extends EthereumCall {
  get inputs(): ModifyAllowanceViaMetaTransactionCall__Inputs {
    return new ModifyAllowanceViaMetaTransactionCall__Inputs(this);
  }

  get outputs(): ModifyAllowanceViaMetaTransactionCall__Outputs {
    return new ModifyAllowanceViaMetaTransactionCall__Outputs(this);
  }
}

export class ModifyAllowanceViaMetaTransactionCall__Inputs {
  _call: ModifyAllowanceViaMetaTransactionCall;

  constructor(call: ModifyAllowanceViaMetaTransactionCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get increase(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get expiration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get salt(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get signatures(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class ModifyAllowanceViaMetaTransactionCall__Outputs {
  _call: ModifyAllowanceViaMetaTransactionCall;

  constructor(call: ModifyAllowanceViaMetaTransactionCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferUnderlyingCall extends EthereumCall {
  get inputs(): TransferUnderlyingCall__Inputs {
    return new TransferUnderlyingCall__Inputs(this);
  }

  get outputs(): TransferUnderlyingCall__Outputs {
    return new TransferUnderlyingCall__Outputs(this);
  }
}

export class TransferUnderlyingCall__Inputs {
  _call: TransferUnderlyingCall;

  constructor(call: TransferUnderlyingCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get underlyingEquivalentAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferUnderlyingCall__Outputs {
  _call: TransferUnderlyingCall;

  constructor(call: TransferUnderlyingCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends EthereumCall {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferUnderlyingFromCall extends EthereumCall {
  get inputs(): TransferUnderlyingFromCall__Inputs {
    return new TransferUnderlyingFromCall__Inputs(this);
  }

  get outputs(): TransferUnderlyingFromCall__Outputs {
    return new TransferUnderlyingFromCall__Outputs(this);
  }
}

export class TransferUnderlyingFromCall__Inputs {
  _call: TransferUnderlyingFromCall;

  constructor(call: TransferUnderlyingFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get underlyingEquivalentAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferUnderlyingFromCall__Outputs {
  _call: TransferUnderlyingFromCall;

  constructor(call: TransferUnderlyingFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RedeemUnderlyingCall extends EthereumCall {
  get inputs(): RedeemUnderlyingCall__Inputs {
    return new RedeemUnderlyingCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingCall__Outputs {
    return new RedeemUnderlyingCall__Outputs(this);
  }
}

export class RedeemUnderlyingCall__Inputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get underlyingToReceive(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall__Outputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get dTokensBurned(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCall extends EthereumCall {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get underlyingToSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get dTokensMinted(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends EthereumCall {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AccrueInterestCall extends EthereumCall {
  get inputs(): AccrueInterestCall__Inputs {
    return new AccrueInterestCall__Inputs(this);
  }

  get outputs(): AccrueInterestCall__Outputs {
    return new AccrueInterestCall__Outputs(this);
  }
}

export class AccrueInterestCall__Inputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class AccrueInterestCall__Outputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class TransferCall extends EthereumCall {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintViaCTokenCall extends EthereumCall {
  get inputs(): MintViaCTokenCall__Inputs {
    return new MintViaCTokenCall__Inputs(this);
  }

  get outputs(): MintViaCTokenCall__Outputs {
    return new MintViaCTokenCall__Outputs(this);
  }
}

export class MintViaCTokenCall__Inputs {
  _call: MintViaCTokenCall;

  constructor(call: MintViaCTokenCall) {
    this._call = call;
  }

  get cTokensToSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintViaCTokenCall__Outputs {
  _call: MintViaCTokenCall;

  constructor(call: MintViaCTokenCall) {
    this._call = call;
  }

  get dTokensMinted(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends EthereumCall {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get dTokensToBurn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get underlyingReceived(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
